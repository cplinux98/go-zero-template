// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/Masterminds/squirrel"
	pkgErrors "github.com/pkg/errors"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUserIdPrefix     = "cache:user:id:"
	cacheUserMobilePrefix = "cache:user:mobile:"
)

type (
	userModel interface {
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
		SelectBuilder() squirrel.SelectBuilder
		InsertBuilder() squirrel.InsertBuilder
		Insert(ctx context.Context, session sqlx.Session, data *User) (sql.Result, error)
		InsertMany(ctx context.Context, session sqlx.Session, list []*User) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*User, error)
		FindManyByBuilderNoCache(ctx context.Context, builder squirrel.SelectBuilder, orderBy string) ([]*User, error)
		FindCountByBuilderNoCache(ctx context.Context, builder squirrel.SelectBuilder, field string) (uint64, error)
		FindPageListByPageWithTotal(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize uint64, orderBy string) ([]*User, uint64, error)
		FindOneByMobile(ctx context.Context, mobile string) (*User, error)
		Update(ctx context.Context, session sqlx.Session, data *User) (sql.Result, error)
		DeleteBuilder() squirrel.DeleteBuilder
		Delete(ctx context.Context, session sqlx.Session, id int64) (sql.Result, error)
		DeleteManyByIds(ctx context.Context, session sqlx.Session, ids interface{}) (sql.Result, error)
	}

	defaultUserModel struct {
		sqlc.CachedConn
		table string
	}

	User struct {
		Id         int64     `db:"id"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		Mobile     string    `db:"mobile"`
		Password   string    `db:"password"`
		Nickname   string    `db:"nickname"`
		Sex        int64     `db:"sex"` // 性别 0:男 1:女
		Avatar     string    `db:"avatar"`
		Info       string    `db:"info"`
	}
)

func newUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserModel {
	return &defaultUserModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user`",
	}
}

// DeleteBuilder
//
//	@Description: 构建删除语句
//	@Author cplinux98 2024-05-06 00:02:47
//	@receiver m
//	@return squirrel.DeleteBuilder
func (m *defaultUserModel) DeleteBuilder() squirrel.DeleteBuilder {
	return squirrel.Delete(m.table)
}

func (m *defaultUserModel) Delete(ctx context.Context, session sqlx.Session, id int64) (sql.Result, error) {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return nil, err
	}

	userIdKey := fmt.Sprintf("%s%v", cacheUserIdPrefix, id)
	userMobileKey := fmt.Sprintf("%s%v", cacheUserMobilePrefix, data.Mobile)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)

		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}

		return conn.ExecCtx(ctx, query, id)

	}, userIdKey, userMobileKey)
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	userIdKey := fmt.Sprintf("%s%v", cacheUserIdPrefix, id)
	var resp User
	err := m.QueryRowCtx(ctx, &resp, userIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// FindManyByBuilderNoCache
//
//	@Description: 根据builder进行查询，没有使用缓存
//	@Author cplinux98 2024-05-06 11:16:56
//	@receiver m
//	@param ctx
//	@param builder
//	@param orderBy  排序语句
//	@return []*User
//	@return error
func (m *defaultUserModel) FindManyByBuilderNoCache(ctx context.Context, builder squirrel.SelectBuilder, orderBy string) ([]*User, error) {
	builder = builder.Columns(userRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	query, values, err := builder.ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*User

	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}

}

// FindCountByBuilderNoCache
//
//	@Description: 根据builder进行count，没有缓存
//	@Author cplinux98 2024-05-06 11:22:31
//	@receiver m
//	@param ctx
//	@param builder
//	@param field count的字段名
//	@return uint64
//	@return error
func (m *defaultUserModel) FindCountByBuilderNoCache(ctx context.Context, builder squirrel.SelectBuilder, field string) (uint64, error) {
	if len(field) == 0 {
		return 0, pkgErrors.Wrapf(pkgErrors.New("FindCountByBuilderNoCache Least One Field"), "FindCountByBuilderNoCache Least One Field")
	}

	builder = builder.Columns("COUNT(" + field + ")")
	query, values, err := builder.ToSql()

	if err != nil {
		return 0, err
	}

	var resp uint64

	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

// FindPageListByPageWithTotal
//
//	@Description: 根据分页参数查询
//	@Author cplinux98 2024-05-06 11:32:51
//	@receiver m
//	@param ctx
//	@param builder  查询参数构建
//	@param page     页数
//	@param pageSize 每页多少条
//	@param orderBy  orderBy语句
//	@return []*User
//	@return uint64  当前条件下的总数
//	@return error
func (m *defaultUserModel) FindPageListByPageWithTotal(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize uint64, orderBy string) ([]*User, uint64, error) {
	total, err := m.FindCountByBuilderNoCache(ctx, builder, "id")

	if err != nil {
		return nil, 0, err
	}

	builder = builder.Columns(userRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	query, values, err := builder.Offset(offset).Limit(pageSize).ToSql()

	if err != nil {
		return nil, total, err
	}

	var resp []*User

	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, total, nil
	default:
		return nil, total, err
	}
}

func (m *defaultUserModel) FindOneByMobile(ctx context.Context, mobile string) (*User, error) {
	userMobileKey := fmt.Sprintf("%s%v", cacheUserMobilePrefix, mobile)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, userMobileKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `mobile` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, mobile); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// Trans
//
//	@Description: 事务
//	@Author cplinux98 2024-05-07 18:45:47
//	@receiver m
//	@param ctx
//	@param fn
//	@return error
func (m *defaultUserModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {

	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})

}

// SelectBuilder
//
//	@Description: 构建查询语句
//	@Author cplinux98 2024-05-06 00:04:41
//	@receiver m
//	@return squirrel.SelectBuilder
func (m *defaultUserModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}

// InsertBuilder
//
//	@Description: 构建插入语句
//	@Author cplinux98 2024-05-06 00:01:27
//	@receiver m
//	@return squirrel.InsertBuilder
func (m *defaultUserModel) InsertBuilder() squirrel.InsertBuilder {
	return squirrel.Insert(m.table)
}

func (m *defaultUserModel) Insert(ctx context.Context, session sqlx.Session, data *User) (sql.Result, error) {
	userIdKey := fmt.Sprintf("%s%v", cacheUserIdPrefix, data.Id)
	userMobileKey := fmt.Sprintf("%s%v", cacheUserMobilePrefix, data.Mobile)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Mobile, data.Password, data.Nickname, data.Sex, data.Avatar, data.Info)
		}
		return conn.ExecCtx(ctx, query, data.Mobile, data.Password, data.Nickname, data.Sex, data.Avatar, data.Info)
	}, userIdKey, userMobileKey)

}

// InsertMany
//
//	@Description: 批量新增
//	@Author cplinux98 2024-05-07 18:49:26
//	@receiver m
//	@param ctx
//	@param session
//	@param list
//	@return sql.Result
//	@return error
func (m *defaultUserModel) InsertMany(ctx context.Context, session sqlx.Session, list []*User) (sql.Result, error) {
	cacheKeys := make([]string, 0)
	insertBuilder := m.InsertBuilder().Columns(userRowsExpectAutoSet)

	for _, data := range list {

		userIdKey := fmt.Sprintf("%s%v", cacheUserIdPrefix, data.Id)
		userMobileKey := fmt.Sprintf("%s%v", cacheUserMobilePrefix, data.Mobile)
		cacheKeys = append(cacheKeys, userIdKey, userMobileKey)

		insertBuilder = insertBuilder.Values(data.Mobile, data.Password, data.Nickname, data.Sex, data.Avatar, data.Info)
	}

	query, values, err2 := insertBuilder.ToSql()
	if err2 != nil {
		return nil, err2
	}
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, query, values...)
		}
		return conn.ExecCtx(ctx, query, values...)
	}, cacheKeys...)
}

func (m *defaultUserModel) Update(ctx context.Context, session sqlx.Session, newData *User) (sql.Result, error) {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return nil, err
	}

	userIdKey := fmt.Sprintf("%s%v", cacheUserIdPrefix, data.Id)
	userMobileKey := fmt.Sprintf("%s%v", cacheUserMobilePrefix, data.Mobile)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)

		if session != nil {
			return session.ExecCtx(ctx, query, newData.Mobile, newData.Password, newData.Nickname, newData.Sex, newData.Avatar, newData.Info, newData.Id)
		}

		return conn.ExecCtx(ctx, query, newData.Mobile, newData.Password, newData.Nickname, newData.Sex, newData.Avatar, newData.Info, newData.Id)

	}, userIdKey, userMobileKey)
}

// DeleteManyByIds
//
//	@Description: 根据id列表删除
//	@Author cplinux98 2024-05-07 19:26:41
//	@receiver m
//	@param ctx
//	@param session
//	@param ids  传入对应的主键类型数组，类似[]int64, []string
//	@return sql.Result
//	@return error
func (m *defaultUserModel) DeleteManyByIds(ctx context.Context, session sqlx.Session, ids interface{}) (sql.Result, error) {
	idWhere := m.SelectBuilder().Where(squirrel.Eq{"id": ids})
	records, err := m.FindManyByBuilderNoCache(ctx, idWhere, "id")
	if err != nil {
		return nil, err
	}
	cacheKeys := make([]string, 0)
	for _, data := range records {
		userIdKey := fmt.Sprintf("%s%v", cacheUserIdPrefix, data.Id)
		userMobileKey := fmt.Sprintf("%s%v", cacheUserMobilePrefix, data.Mobile)
		cacheKeys = append(cacheKeys, userIdKey, userMobileKey)
	}

	query, values, err2 := m.DeleteBuilder().Where(squirrel.Eq{"id": ids}).ToSql()
	if err2 != nil {
		return nil, err2
	}

	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (sql.Result, error) {

		if session != nil {
			return session.ExecCtx(ctx, query, values...)
		}
		return conn.ExecCtx(ctx, query, values...)
	}, cacheKeys...)

}

func (m *defaultUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUserIdPrefix, primary)
}

func (m *defaultUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
